const discord = require("discord.js");
const musicPlayer = require("../../structures/musicPlayer");
const yts = require("yt-search");
const YouTubeAPI = require("simple-youtube-api");
const check = require("../../structures/modifyQueue");

module.exports.run = async function (client, message, args) {
    const youtube = new YouTubeAPI(client.config.youtubeApi);

    let channel = message.member.voice.channel;
    if (!channel) {
        message.reply("‚ùì ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÑ‡∏´‡∏ô‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏¥ ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡∏≠‡∏î‡∏ü‡∏±‡∏á‡∏ô‡πâ‡∏≤‡∏≤...");
    } else {
        let permissions = channel.permissionsFor(message.client.user);
        if (!permissions.has("CONNECT")) {
            message.reply("üö´ ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡πÅ‡∏ï‡πà‡∏ß‡πà‡∏≤‡∏≤...‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∞ ‡∏•‡∏≠‡∏á‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏î‡∏π‡∏ô‡∏∞‡∏Ñ‡∏∞");
        } else {
            if (!permissions.has("SPEAK")) {
                message.reply("üö´ ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡πÅ‡∏ï‡πà‡∏ß‡πà‡∏≤‡∏≤...‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∞ ‡∏•‡∏≠‡∏á‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏î‡∏π‡∏ô‡∏∞‡∏Ñ‡∏∞");
            } else {
                if (!args.length) {
                    message.reply("‚ùì ‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏´‡∏£‡∏≠‡∏Ñ‡∏∞ ‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡πÄ‡∏•‡∏¢‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ô‡∏∞");
                } else {
                    channel.join().then(async function (connection) {
                        let serverQueue = message.client.queue.get(message.guild.id);
                        let videoPattern = /^(https?:\/\/)?(www\.)?(m\.)?(youtube\.com|youtu\.?be)\/.+$/gi;
                        let playlistPattern = /^.*(list=)([^#\&\?]*).*/gi;
                        let videoPlaylistPattern = /^.*(youtu.be\/|list=)([^#\&\?]*).*/gi;
                        let search = args.join(" ");
                        let url = args[0];
                        let videos = [];
                        let playlist;
                        let song;

                        let queueConstruct = {
                            "textChannel": message.channel,
                            "voiceChannel": channel,
                            "connection": null,
                            "require": {
                                "avatar": message.author.displayAvatarURL(),
                                "username": message.author.username,
                                "timestamp": new Date()
                            },
                            "songs": [],
                            "loop": false,
                            "volume": 100,
                            "playing": true
                        };
                        
                        // Start the playlist if playlist url was provided
                        if (!videoPattern.test(url) && playlistPattern.test(url)) {
                            if (!youtube) {
                                message.reply("‚ùå ‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡πä‡∏≤‡∏≤‡∏≤...‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏ó‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏Ñ‡∏∞ T~T");
                            } else {
                                if (videoPlaylistPattern.test(url)) {
                                    try {
                                        playlist = await youtube.getPlaylist(url, { "part": "snippet" });
                                        videos = await playlist.getVideos(10, { "part": "snippet" });
                                    } catch (error) {
                                        console.log(error);
                                        return message.channel.send("‚ùé ‡∏´‡∏≤‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏≠‡πà‡∏∞ ‡∏à‡∏ö‡∏•‡∏∞");
                                    }
                                } else {
                                    try {
                                        let results = await youtube.searchPlaylists(search, { "part": "snippet" });
                                        playlist = results[0];
                                        videos = await playlist.getVideos(10, { "part": "snippet" });
                                    } catch (error) {
                                        console.log(error);
                                        return message.channel.send("‚ùé ‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ô‡∏µ‡πâ‡∏ô‡∏∞: " + error.message);
                                    }
                                }
        
                                videos.forEach(function (result) {
                                    song = {
                                        "type": result.type,
                                        "id": result.id,
                                        "url": "https://www.youtube.com/watch?v=" + result.id,
                                        "title": result.title,
                                        "description": result.description,
                                        "thumbnail": result.thumbnails.default.url,
                                        "duration": result.durationSeconds,
                                        "publishedAt": result.publishedAt,
                                        "channel": {
                                            "url": "https://www.youtube.com/channel/" + result.channel.id
                                        }
                                    };

                                    // Add a list of all songs.
                                    if (serverQueue) {
                                        if (check(message.member)) {
                                            serverQueue.songs.push(song);
                                        }
                                    } else {
                                        queueConstruct.songs.push(song);
                                    }
                                });

                                let playlistEmbed = new discord.MessageEmbed()
                                    .setTitle(playlist.title)
                                    .setURL(playlist.url)
                                    .setColor("#F8AA2A")
                                    .setTimestamp()
                                    .setFooter(message.author.username, message.author.displayAvatarURL());
            
                                playlistEmbed.setDescription(queueConstruct.songs.map((songs, index) => (index + 1) + ". " + songs.title));
                                if (playlistEmbed.description.length >= 2048) {
                                    playlistEmbed.description = playlistEmbed.description.substr(0, 2007) + "\n‡∏≠‡∏∏‡πâ‡∏¢...‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡πÄ‡∏¢‡∏≠‡∏∞‡πÑ‡∏õ ‡∏Ç‡∏≠‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏∞";
                                }
    
                                if (serverQueue) {
                                    if (!check(message.member)) {
                                        message.channel.send("üö´ ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏î‡πâ");
                                    } else {
                                        message.channel.send("üìÇ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", playlistEmbed);
                                    }
                                } else {
                                    message.channel.send("üìÅ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™", playlistEmbed);
                                    
                                    message.client.queue.set(message.guild.id, queueConstruct);
        
                                    queueConstruct.connection = connection;
                                    await queueConstruct.connection.voice.setSelfDeaf(true);
                                    musicPlayer(client, channel, message, queueConstruct.songs[0]);
                                }
                            }
                        } else {
                            yts(search, async function (error, result) {
                                if (error) {
                                    console.log("I can't find the song: " + error);
                                    return message.channel.send("‚ùé ‡∏≠‡∏∑‡∏°‡∏°...‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞");
                                } else {
                                    videos = result.videos;
                                    song = {
                                        "type": videos[0].type,
                                        "id": videos[0].videoId,
                                        "url": videos[0].url,
                                        "title": videos[0].title,
                                        "description": videos[0].description,
                                        "image": videos[0].image,
                                        "thumbnail": videos[0].thumbnail,
                                        "seconds": videos[0].seconds,
                                        "timestamp": videos[0].timestamp,
                                        "duration": videos[0].duration,
                                        "ago": videos[0].ago,
                                        "views": videos[0].views,
                                        "author": {
                                            "name": videos[0].author.name,
                                            "url": videos[0].author.url
                                        }
                                    };
    
                                    if (serverQueue) {
                                        if (!check(message.member)) {
                                            message.channel.send("üö´ ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏î‡πâ");
                                        } else {
                                            serverQueue.songs.push(song);
                                            message.channel.send("‚úÖ **" + song.title + "** ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∞!!");
                                        }
                                    } else {
                                        message.client.queue.set(message.guild.id, queueConstruct);
                                        queueConstruct.songs.push(song);
    
                                        queueConstruct.connection = connection;
                                        await queueConstruct.connection.voice.setSelfDeaf(true);
                                        musicPlayer(client, channel, message, queueConstruct.songs[0]);
                                    }
                                }
                            });
                        }
                    }).catch(async function (err) {
                        console.log("I could not join the voice channel: " + err);
                        message.client.queue.delete(message.guild.id);
                        await channel.leave();
                        message.channel.send("‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ñ‡∏∞: " + err);
                    });
                }
            }
        }
    }
};

module.exports.help = {
    "name": "play",
    "description": "Sing to listen",
    "usage": "Yplay <name>",
    "category": "music",
    "aliases": ["‡πÄ‡∏•‡πà‡∏ô", "p", "‡πÄ‡∏û‡∏•‡∏á"]
};